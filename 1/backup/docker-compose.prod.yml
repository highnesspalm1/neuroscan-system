version: '3.8'

# Production Docker Compose configuration
# Use this file for production deployments with: docker-compose -f docker-compose.prod.yml up -d

services:
  # Backend API Service
  backend:
    build: 
      context: ./BackendAPI
      dockerfile: Dockerfile
    container_name: neuroscan-backend-prod
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://neuroscan:${POSTGRES_PASSWORD}@postgres:5432/neuroscan_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_backups:/app/backups
    networks:
      - neuroscan-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Web Frontend Service
  frontend:
    build:
      context: ./WebFrontend
      dockerfile: Dockerfile
    container_name: neuroscan-frontend-prod
    restart: always
    environment:
      - VITE_API_URL=${VITE_API_URL}
      - VITE_ENVIRONMENT=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - neuroscan-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neuroscan-postgres-prod
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/postgres.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - neuroscan-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: neuroscan-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --save 900 1 --save 300 10 --save 60 10000
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - redis_config:/usr/local/etc/redis
    networks:
      - neuroscan-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: neuroscan-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - neuroscan-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup Service (runs daily)
  backup:
    image: postgres:15-alpine
    container_name: neuroscan-backup
    restart: "no"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - neuroscan-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup
    command: /backup.sh
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neuroscan/postgres_data
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neuroscan/backups
  redis_data:
    driver: local
  redis_config:
    driver: local
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/neuroscan/uploads
  backend_logs:
    driver: local
  backend_backups:
    driver: local
  nginx_cache:
    driver: local

networks:
  neuroscan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
